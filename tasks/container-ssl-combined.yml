---
- name: Creating directory to place SSL keys
  file: path=/etc/pmm-certs state=directory

- name: Generating default SSL Key
  command: "openssl req -x509 -subj '/C=/ST=/L=/O=IT/CN={{ansible_fqdn}}' -nodes -days 3650 -newkey rsa:2048 -keyout /etc/pmm-certs/server.key -out /etc/pmm-certs/server.crt creates=/etc/pmm-certs/server.crt"
  when: pmm_server_default_cert

- name: Verifying if cert file exists
  stat: path=/etc/pmm-certs/certificate.key
  register: cert_file

- name: Verifying if key file exists
  stat: path=/etc/pmm-certs/certificate.key
  register: key_file

- name: Running PMM Data Container with SSL Encryption
  docker_container:
    name: pmm-server
    image: "percona/pmm-server:{{ pmm_server_version }}"
    state: started
    cpu_period: "{{ pmm_server_docker_cpu_period }}"
    cpu_quota: "{{ pmm_server_docker_cpu_quota }}"
    memory: "{{ pmm_server_docker_memory }}"
    memory_reservation: "{{ pmm_server_docker_memory_reservation }}"
    memory_swap: "{{ pmm_server_docker_memory_swap }}"
    network_mode: "{{ pmm_server_docker_network_mode }}"
    purge_networks: "{{ pmm_server_docker_purge_networks }}"
    networks: "{{ pmm_server_docker_networks }}"
    volumes:
    - /etc/pmm-certs:/srv/nginx
    - /etc/grafana:/etc/grafana
    volumes_from:
    - pmm-data
    env: "{{ __pmm_server_env }}"
    ports: "{{ [] if pmm_server_docker_network_mode == 'host' else [ pmm_server_http_port + ':80', pmm_server_https_port + ':443' ]"
    restart_policy: always
  when:
    - not pmm_server_ENABLE_PROTECTION
    - pmm_server_ENABLE_SSL
    - cert_file.stat.exists
    - key_file.stat.exists

- name: Check for emtpy pmm_server_username and pmm_server_password
  fail: msg="Username or pmm_server_password cannot be empty while enabling pmm_server_password protection"
  when: ( pmm_server_username == '' ) or ( pmm_server_password == '' )

- name: Running PMM Data Container with both SSL Encryption and pmm_server_password protection
  docker_container:
    name: pmm-server
    image: "percona/pmm-server:{{ pmm_server_version }}"
    state: started
    cpu_period: "{{ pmm_server_docker_cpu_period }}"
    cpu_quota: "{{ pmm_server_docker_cpu_quota }}"
    memory: "{{ pmm_server_docker_memory }}"
    memory_reservation: "{{ pmm_server_docker_memory_reservation }}"
    memory_swap: "{{ pmm_server_docker_memory_swap }}"
    network_mode: "{{ pmm_server_docker_network_mode }}"
    purge_networks: "{{ pmm_server_docker_purge_networks }}"
    networks: "{{ pmm_server_docker_networks }}"
    volumes:
    - /etc/pmm-certs:/srv/nginx
    - /etc/grafana:/etc/grafana
    volumes_from:
    - pmm-data
    env: "{{ __pmm_server_env }}"
    ports: "{{ [] if pmm_server_docker_network_mode == 'host' else [ pmm_server_http_port + ':80', pmm_server_https_port + ':443' ] }}"
    restart_policy: always
  when:
    - pmm_server_ENABLE_PROTECTION
    - pmm_server_ENABLE_SSL
    - cert_file.stat.exists
    - key_file.stat.exists

